
''' Q1 '''
import numpy as np
import scipy.linalg as sl

In[]:
A=np.random.rand(4,4)
while sl.det(A)==0:
  A=np.random.rand(4,4)
b=np.random.rand(4,1)

print(A,b)
Out[]:
[0.07630829 0.77991879 0.43840923 0.72346518] 
[0.97798951 0.53849587 0.50112046 0.07205113] 
[0.26843898 0.4998825  0.67923    0.80373904] 
[0.38094113 0.06593635 0.2881456  0.90959353]
[[0.21338535]
 [0.45212396]
 [0.93120602]
 [0.02489923]]

In[]:
x=sl.solve(A,b)
print(x)
Out[]:
[[-0.53566754]
 [-0.70185135]
 [ 2.78518733]
 [-0.57971491]]

In[]:
print(A.T)
Out[]:
[[0.07630829 0.97798951 0.26843898 0.38094113]
 [0.77991879 0.53849587 0.4998825  0.06593635]
 [0.43840923 0.50112046 0.67923    0.2881456 ]
 [0.72346518 0.07205113 0.80373904 0.90959353]]

In[]:
print(sl.det(A))
Out[]:
-0.20444371038425466

In[]:
print(sl.inv(A))
Out[]:
[[-0.06768111  0.963234   -1.05165247  0.90679731]
 [ 1.93564919  0.36478311 -1.36467036 -0.36260041]
 [-2.02401994 -0.22474763  3.60553674 -1.55828875]
 [ 0.52920926 -0.35865237 -0.60281925  1.23954949]]

In[]:
rank=np.linalg.matrix_rank(A)
print(rank)
Out[]:
4

In[]:
eig_val=sl.eigvals(A)
print(eig_val)
Out[]:
[ 1.96100735+0.j -0.68484114+0.j  0.21310225+0.j  0.71435921+0.j]  

In[]:
eig_vec=sl.eig(A)[1]
print(eig_vec)
Out[]:
[[-0.49993394 -0.7154964  -0.29788005 -0.23636614]
 [-0.55686504  0.6439762  -0.39056237 -0.78052716]
 [-0.55225241 -0.20170068  0.85719665  0.10556376]
 [-0.36740258  0.1807661  -0.15473334  0.56900325]]

''' Q2 '''


In[]:
B=np.random.rand(6,4)
while np.linalg.matrix_rank(B)!=4:
  B=np.random.rand(6,4)
b=np.random.rand(6,1)

print(B,b)
Out[]:
[[0.66393257 0.22861142 0.6010777  0.99860749]
 [0.70484666 0.50062142 0.07754203 0.30356981]
 [0.49233433 0.63370408 0.78695444 0.98258128]
 [0.35582392 0.80874916 0.56164219 0.99520123]
 [0.96041737 0.38043753 0.14278986 0.19938878]
 [0.65107448 0.13457273 0.56860538 0.16493498]] 
[[0.29131996]
 [0.27707531]
 [0.72172264]
 [0.97096782]
 [0.08916361]
 [0.48073756]]

#min binary multiplication solve

In[]:
ans=sl.inv(B.T.dot(B)).dot(B.T).dot(b)
print(ans)
Out[]:
[[-0.29251406]
 [ 0.95332021]
 [ 0.90532011]
 [-0.30902283]]


In[]:
U,s,V_T= sl.svd(B)
print(U,s,V_T.T)
Out[]:
[[-0.47488851  0.11457901  0.4666239  -0.72021043 -0.08276972  0.13439048]
 [-0.28677511 -0.40993198 -0.46089807 -0.10458252 -0.72222794 -0.06883361]
 [-0.52949968  0.31153376  0.0628695   0.30178687  0.01880358 -0.72608219]
 [-0.49744525  0.38962868 -0.45792137  0.17781605  0.18861136  0.56908078]
 [-0.30380001 -0.67605017 -0.16191314 -0.1054548   0.63342934 -0.10996548]
 [-0.26856062 -0.3360354   0.57443423  0.58012486 -0.18540608  0.33772836]]
[2.75533687 0.95530078 0.56008327 0.33778383] 
[[-0.51599788 -0.82583717  0.12757577 -0.18831777]
 [-0.41436062  0.03254405 -0.78355744  0.4618267 ]
 [-0.43546216  0.22346266  0.60800345  0.62511515]
 [-0.61026565  0.51671878 -0.0096941  -0.60040284]]

In[]:
lu_tuple=sl.lu(B)
print(lu_tuple[:])
Out[]:
[ [0., 0., 0., 1., 0., 0.],
  [0., 0., 0., 0., 1., 0.],
  [0., 0., 0., 0., 0., 1.],
  [0., 1., 0., 0., 0., 0.],
  [1., 0., 0., 0., 0., 0.],
  [0., 0., 1., 0., 0., 0.]]
[ [ 1.        ,  0.        ,  0.        ,  0.     ],
  [ 0.37048884,  1.        ,  0.        ,  0.        ],
  [ 0.67790785, -0.18467898,  1.        ,  0.        ],
  [ 0.69129588, -0.05148758,  0.93424928,  1.        ],
  [ 0.7338962 ,  0.33156534, -0.34631519, -0.1095141 ],
  [ 0.51262539,  0.6569052 ,  0.67088919,  0.19547199]],
[ [0.96041737, 0.38043753, 0.14278986, 0.19938878],
  [0.        , 0.66780129, 0.50874014, 0.92132992],
  [0.        , 0.        , 0.56576063, 0.19991803],
  [0.        , 0.        , 0.        , 0.72143462]]

'''Q3'''
import scipy.sparse as sps
import numpy as np
import scipy.sparse.linalg as spla

row = np.array([0,0,1,2,2,3,3,4,4])
col = np.array([0,2,3,1,4,2,4,3,4])
data = np.array(range(1,10))
csr1 = sps.csr_matrix((data, (row, col)), shape=(5, 5))
print(csr1.toarray())
'''
[[1 0 2 0 0]
 [0 0 0 3 0]
 [0 4 0 0 5]
 [0 0 6 0 7]
 [0 0 0 8 9]]
''' 

indptr = np.array([0,2,3,5,7,9])
indices = np.array([0,2,3,1,4,2,4,3,4])
data = np.array(range(1,10))
csr2 = sps.csr_matrix((data, indices, indptr), shape=(5, 5))
print(csr2.toarray())
'''
[[1 0 2 0 0]
 [0 0 0 3 0]
 [0 4 0 0 5]
 [0 0 6 0 7]
 [0 0 0 8 9]]
'''

b = np.array([4, 2, 1, 3, 5])
print(spla.spsolve(csr2, b)) 
# [ 2.91358025 0.2962963 0.54320988 0.66666667 -0.03703704]
