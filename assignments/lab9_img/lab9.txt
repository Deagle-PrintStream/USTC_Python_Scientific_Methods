'''Q1.py'''
import math
import numpy as np
import sys,os
import matplotlib.pyplot as plt
from Integral_module import \
	Integrator,Trapezoidal,Simpson,GaussLegendre
# Integral_module is Q2.py for lab5

os.chdir(sys.path[0])

# list for x-axis and y-axis
n_list=np.logspace(2,10,9,endpoint=True,base=2).astype(int)
methods:list[type] = [Trapezoidal, Simpson, GaussLegendre]
rel_err_list:dict[type,list[float]]=\
	{Trapezoidal:[],Simpson:[],GaussLegendre:[]}

def f(x:float)->float: return (x * math.cos(x) + math.sin(x)) * \
	math.exp(x * math.sin(x))
def F(x:float)->float: return math.exp(x * math.sin(x))

a = 2; b = 3
I_exact = F(b) - F(a)

#get relative error of each integral method
for n in n_list:
	for method in methods:
			integrator:Integrator = method(a, b, n)
			I = integrator.integrate(f)
			rel_err = abs((I_exact - I) / I_exact)
			rel_err_list[method].append(rel_err)

#plot the graph
plt.figure(figsize=(8,4),dpi=300)
plt.xticks(n_list)
plt.yscale('log');plt.xscale('log')
plt.plot(n_list,rel_err_list[Trapezoidal],color='g',\
	linestyle='-',label='Trapezoidal')
plt.plot(n_list,rel_err_list[Simpson],color='k',\
	linestyle='--',label='Simpson')
plt.plot(n_list,rel_err_list[GaussLegendre],color='r',\
	linestyle='-.',label='GaussLegendre')
plt.xlabel('n size');plt.ylabel('Relative error')
plt.title('Relative Error of each Integral Method')
plt.legend();plt.grid(linestyle=':');plt.show()

Out[]: ./matplotlib_1.png

'''time_expense_module.py'''
# time_expense_module is Q2.py for lab8

def get_time_expense()->dict[str,list[float]]:
    time_expense_dict:dict[str,list[float]]={"Insertion":[],"Merge":[],"Quick":[]}
    N=10 #trails for each algorithm
    for n in range(100,1001,100):
        time_expense_dict["Insertion"].append(1000*\
            timeit.timeit(stmt=insert_sort_str % n,number=N)/N)
        time_expense_dict["Merge"].append(1000*\
            timeit.timeit(stmt=merge_sort_str % n,number=N)/N)
        time_expense_dict["Quick"].append(1000*\
            timeit.timeit(stmt=quick_sort_str % n,number=N)/N)
    return time_expense_dict

'''Q2.py'''
import matplotlib.pyplot as plt
import sys,os
from time_expense_module import get_time_expense

os.chdir(sys.path[0])

x=range(100,1001,100)
y_dict=get_time_expense()

plt.figure(figsize=(8,4),dpi=300)
plt.xticks(x)
plt.yscale('linear');plt.xscale('linear')
plt.plot(x,y_dict["Insertion"],color='g',\
	linestyle='-',label='Insertion Sort')
plt.plot(x,y_dict["Merge"],color='k',\
	linestyle='--',label='Merge Sort')
plt.plot(x,y_dict["Quick"],color='r',\
	linestyle='-.',label='Quick Sort')
plt.xlabel('Input size');plt.ylabel('Time expense(ms)')
plt.title('Time Expense of each Sorting Method')
plt.legend();plt.grid(linestyle=':');plt.show()

Out[]: ./matplotlib_2.png


'''Q3.py'''

import numpy as np
import matplotlib.pyplot as plt
import matplotlib.cm as cm # for cm.hot
import matplotlib as mpl
import sys,os

def default_labels(ax,title:str)->None:
    ax.set_title(title)
    ax.set_xlabel("$x$")
    ax.set_ylabel("$y$")
    ax.set_zlabel("$z$")


os.chdir(sys.path[0])

#a,y,z axis defines
X,Y=np.meshgrid(np.linspace(-2,2,100),np.linspace(-2,2,100))

Z=(3*X**3-2*X+4*X**2*Y+2*Y**2)*np.exp(-X**2-Y**2)

fig,axes=plt.subplots(2,2,figsize=(8,6),subplot_kw={'projection':'3d'})

#1st graph
norm=mpl.colors.Normalize(vmin=Z.min(),vmax=Z.max())
p=axes[0,0].plot_surface(X,Y,Z,linewidth=0,rcount=20,ccount=20,\
                         norm=norm,cmap=cm.hot) 
cb=fig.colorbar(p,ax=axes[0,0],pad=0.1,shrink=0.6)
default_labels(axes[0,0],"surface plot")

#2nd graph
cset=axes[0,1].contour(X,Y,Z,zdir='x',levels=30,norm=norm,cmap=cm.hot)
default_labels(axes[0,1],"contour x")

#3rd graph
cset=axes[1,0].contour(X,Y,Z,zdir='y',levels=30,norm=norm,cmap=cm.hot)
default_labels(axes[1,0],"contour y")

#4nd graph
cset=axes[1,1].contour(X,Y,Z,zdir='z',levels=30,norm=norm,cmap=cm.hot)
default_labels(axes[1,1],"contour z")

fig.tight_layout();plt.show()

Out[]:./matplotlib_3
