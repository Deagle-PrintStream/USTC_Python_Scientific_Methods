import sympy as sym
from sympy import sin ,cos, exp,sqrt
import sys,os

os.chdir(sys.path[0])

'''Q1'''
a,b=sym.symbols("a,b",real=True)
A=sym.Matrix([[3,-2,a,a],[0,2,b,b],[-5,2,-9,-7],[a,-2,a,3]])

A_reverse=A**(-1)

eigenval=A.eigenvals()
eigenvec_list=A.eigenvects()
eigenvec:list[sym.Matrix]=[]
for element in eigenvec_list:
    eigenvec.append(element[-1]) #type: ignore

print(A_reverse)
print(eigenval)
print(eigenvec)

'''
Out[]:
Matrix([[(-a*b - 7*a + 5*b + 27)/(3*a**2 - 36*a + 81), 1/3, (-a - b)/(3*a - 27), (-2*a - 2*b)/(3*a**2 - 36*a + 81)],
[(-a*b + 5*b)/(2*a**2 - 24*a + 54), 1/2, -b/(2*a - 18), -b/(a**2 - 12*a + 27)],
[(a*b + 7*a - 5*b - 15)/(3*a**2 - 36*a + 81), -1/3, (a + b + 3)/(3*a - 27), (5*a + 2*b - 21)/(3*a**2 - 36*a + 81)],
[(-a*b- 4*a + 5*b)/(3*a**2 - 36*a + 81), 1/3, (-a - b)/(3*a - 27), (-5*a - 2*b + 27)/(3*a**2 - 36*a + 81)]])

{3: 1, 2: 1, a - 9: 1, 3 - a: 1}
[[Matrix([[  1],[1/2],[ -1],[  1]])], 
[Matrix([[ 1],[ 0],[-1],[ 1]])], 
[Matrix([
[(-a**3 + 6*a**2 - 2*a*b - 5*a + 10*b)/(a**3 - 8*a**2 - 2*a*b + 7*a + 10*b)],
[                    (-a**2*b + 5*a*b)/(a**3 - 8*a**2 - 2*a*b + 7*a + 10*b)],
[        (2*a**2 + 2*a*b - 2*a - 10*b)/(a**3 - 8*a**2 - 2*a*b + 7*a + 10*b)],
[1]
])], [Matrix([
[                                      1],
[       (a*b - 12*b)/(a**2 - 11*a - 2*b)],
[(-12*a + 2*b + 132)/(a**2 - 11*a - 2*b)],
[                                      1]
])]]
'''

'''Q2'''

c=sym.Symbol("c",real=True)
x,y,z,w=sym.symbols("x,y,z,w",real=True)
array_b=sym.Matrix([[1],[-2],[3],[c]])
A_expend=A.col_insert(4,array_b)
print(A_expend)

print(sym.linsolve(A_expend,(x,y,z,w)))

'''
Out[]:
{((-5*a**2 - 4*a*b - 2*a*c + 26*a - 2*b*c + 14*b - 27)/(3*a**2 - 36*a + 81),
(-a**2 - 2*a*b + 12*a - b*c + 7*b - 27)/(a**2 - 12*a + 27),
(5*a**2 + 4*a*b + 5*a*c - 17*a + 2*b*c - 14*b - 21*c + 12)/(3*a**2 - 36*a + 81),
(-5*a**2 - 4*a*b - 5*a*c + 29*a - 2*b*c + 14*b + 27*c - 54)/(3*a**2 - 36*a + 81))}
'''

'''Q3'''

'''
f''-2f'+3f-4=0
f(0)=16
f'(0)=18
'''
#general solution
f=sym.Function("f")
x=sym.Symbol("x",real=True)
ode=f(x).diff(x,x)-2*f(x).diff(x)+3*f(x)-4 #type: ignore
print(sym.Eq(ode,0))
ode_solve=sym.dsolve(ode)
print(ode_solve)

#particular solution
C1,C2=sym.symbols("C1,C2",real=True)
general_sol=(C1*sin(sqrt(2)*x) + C2*cos(sqrt(2)*x))*exp(x) + 4/3

eq1=general_sol-16; eq2=general_sol-18
f1=eq1.subs(x,0);   f2=eq2.diff(x,1).subs(x,0)
parameters = sym.solve([f1, f2], [C1, C2])
particular_sol = general_sol
particular_sol = particular_sol.subs(C1, parameters[C1])
particular_sol = particular_sol.subs(C2, parameters[C2])

print(particular_sol)
'''
Out[]:
Eq(3*f(x) - 2*Derivative(f(x), x) + Derivative(f(x), (x, 2)) - 4, 0)
Eq(f(x), (C1*sin(sqrt(2)*x) + C2*cos(sqrt(2)*x))*exp(x) + 4/3)
(-10.3708994574027*sin(sqrt(2)*x) + 14.6666666666667*cos(sqrt(2)*x))*exp(x) + 1.33333333333333
'''
